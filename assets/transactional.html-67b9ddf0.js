import{_ as a,o as n,c as t,a as o}from"./app-c9408cad.js";const r={},p=o('<h2 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional" aria-hidden="true">#</a> @Transactional</h2><p>@Transactional 是 Spring 框架提供的用于声明事务管理的注解。使用 @Transactional 注解可以简化事务管理，提高代码的开发效率。</p><p>在使用 @Transactional 注解时，需要注意以下几点：</p><p><strong>1. 注解的位置</strong></p><p>@Transactional 注解应该放在需要进行事务管理的方法上。如果将注解放在类上，则该类中的所有 public 方法都会被纳入事务管理范围。</p><p><strong>2. 方法的修饰符</strong></p><p>@Transactional 注解只能应用于 public 方法。如果方法是 protected、private 或包内可见，则注解无效。</p><p><strong>3. 方法的返回值</strong></p><p>@Transactional 注解不能应用于 void 方法。如果方法的返回值是 void，则注解无效。</p><p><strong>4. 异常处理</strong></p><p>在事务方法中抛出的异常会导致事务回滚。如果需要捕获异常并进行处理，则需要在 catch 块中显式地调用 <code>TransactionAspectSupport.currentTransaction().rollback()</code> 方法来回滚事务。</p><p><strong>5. 事务传播属性</strong></p><p>@Transactional 注解的 propagation 属性用于指定事务的传播行为。默认情况下，propagation 属性的值为 REQUIRED，表示如果当前存在事务，则加入该事务，否则创建一个新事务。</p><p><strong>6. 事务超时</strong></p><p>@Transactional 注解的 timeout 属性用于指定事务的超时时间。如果事务在超时时间内没有完成，则会抛出 TimeoutException 异常。</p><p><strong>7. 只读事务</strong></p><p>@Transactional 注解的 readOnly 属性用于指定事务是否只读。如果设置为 true，则事务只能进行查询操作，不能进行更新操作。</p><p><strong>8. 事务隔离级别</strong></p><p>@Transactional 注解的 isolation 属性用于指定事务的隔离级别。默认情况下，isolation 属性的值为 DEFAULT，表示使用数据库的默认隔离级别。</p><p><strong>9. 回滚规则</strong></p><p>@Transactional 注解的 rollbackFor 属性和 noRollbackFor 属性用于指定哪些异常会导致事务回滚。</p><p><strong>10. 其他注意事项</strong></p><ul><li>在同一个类中方法调用，导致 @Transactional 失效。</li><li>不要在 protected , private 或者包内可见方法上使用注解 @Transactional。</li><li>尽量不要从 @Transactional 方法内捕捉数据库操作异常。</li><li>数据库引擎不支持事务。</li></ul>',23),s=[p];function i(c,l){return n(),t("div",null,s)}const g=a(r,[["render",i],["__file","transactional.html.vue"]]);export{g as default};
